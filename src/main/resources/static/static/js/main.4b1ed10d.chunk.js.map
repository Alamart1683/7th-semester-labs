{"version":3,"sources":["services/Request.js","App.js","serviceWorker.js","index.js"],"names":["Request","getJournal","activeGroup","fetch","method","then","res","json","App","state","journal","this","setState","className","onClick","Component","JournalTable","Table","bordered","props","map","studentId","studyGroupId","studyPlanId","inTime","toString","count","bgcolor","markName","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kSAYeA,EAZC,CACZC,WADY,SACDC,GACP,OAAmB,GAAfA,EACOC,MAAM,mBAAoB,CAACC,OAAQ,QACrCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAGdJ,MAAM,4BAA8BD,EAAa,CAACE,OAAQ,QAC5DC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,YCF3BC,E,kDACF,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTP,YAAa,EACbQ,QAAS,MAJH,E,gEAQO,IAAD,OAChBV,EAAQC,WAAWU,KAAKF,MAAMP,aAAaG,MAAK,SAACK,GAC7C,EAAKE,SAAS,CAACF,QAASA,S,+BAItB,IAAD,OACL,OACI,yBAAKG,UAAU,OACVF,KAAKF,MAAMC,QAAU,kBAAC,EAAD,CAAcA,QAASC,KAAKF,MAAMC,UAAY,KACpE,4BAAQI,QAAS,WAAQ,EAAKF,SAAS,CAACV,YAAY,IAAI,WACpDF,EAAQC,WAAW,EAAKQ,MAAMP,aAC7BG,MAAK,SAACK,GAAa,EAAKE,SAAS,CAACF,QAAQA,YAF/C,2DAKA,4BAAQI,QAAS,WAAQ,EAAKF,SAAS,CAACV,YAAY,IAAI,WACpDF,EAAQC,WAAW,EAAKQ,MAAMP,aAC7BG,MAAK,SAACK,GAAa,EAAKE,SAAS,CAACF,QAAQA,YAF/C,0CAKA,4BAAQI,QAAS,WAAQ,EAAKF,SAAS,CAACV,YAAY,IAAI,WACpDF,EAAQC,WAAW,EAAKQ,MAAMP,aAC7BG,MAAK,SAACK,GAAa,EAAKE,SAAS,CAACF,QAAQA,YAF/C,0CAKA,4BAAQI,QAAS,WAAQ,EAAKF,SAAS,CAACV,YAAY,IAAI,WACpDF,EAAQC,WAAW,EAAKQ,MAAMP,aAC7BG,MAAK,SAACK,GAAa,EAAKE,SAAS,CAACF,QAAQA,YAF/C,0CAKA,4BAAQI,QAAS,WAAQ,EAAKF,SAAS,CAACV,YAAY,IAAI,WACpDF,EAAQC,WAAW,EAAKQ,MAAMP,aAC7BG,MAAK,SAACK,GAAa,EAAKE,SAAS,CAACF,QAAQA,YAF/C,+C,GAvCEK,aAkDZC,E,uKAEE,OAAO,kBAACC,EAAA,EAAD,CAAOC,UAAQ,GACtB,+BACI,4BACI,mFACA,kHACA,+EACA,sFACA,+GACA,oEACA,iHAGR,+BACCP,KAAKQ,MAAMT,QAAQU,KAAI,SAACV,GACrB,OAAO,4BACC,4BAAKA,EAAQW,WACb,4BAAKX,EAAQY,cACb,4BAAKZ,EAAQa,aACb,4BAAKb,EAAQc,OAAOC,YACpB,4BAAKf,EAAQgB,OACb,wBAAIC,QAA6B,sHAApBjB,EAAQkB,UAAyD,8CAApBlB,EAAQkB,UAA4C,wCAApBlB,EAAQkB,SAAuB,SAAW,SACnIlB,EAAQkB,UACT,4BAAKlB,EAAQmB,gB,GAxBNd,aAiCZP,IC7EKsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4b1ed10d.chunk.js","sourcesContent":["const Request = {\r\n    getJournal(activeGroup) {\r\n        if (activeGroup == 0) {\r\n            return fetch('/journalview/all', {method: 'get'})\r\n                .then(res => res.json());\r\n        }\r\n        else {\r\n            return fetch('/journalview/get/ByGroup/' + activeGroup, {method: 'get'})\r\n                .then(res => res.json());\r\n        }\r\n    }\r\n};\r\nexport default Request","import React, {Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Navbar, Nav, Dropdown, Tabs, Table, Tab } from 'react-bootstrap';\nimport Request from './services/Request';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            activeGroup: 0,\n            journal: null\n        };\n    }\n\n    componentDidMount() {\n        Request.getJournal(this.state.activeGroup).then((journal) => {\n            this.setState({journal: journal});\n        });\n    }\n\n    render() {\n        return (\n            <div className='App'>\n                {this.state.journal ? <JournalTable journal={this.state.journal}/> :null}\n                <button onClick={() => { this.setState({activeGroup:0}, () => {\n                    Request.getJournal(this.state.activeGroup)\n                    .then((journal) => {this.setState({journal:journal})})});\n                }}>Все группы\n                </button>\n                <button onClick={() => { this.setState({activeGroup:1}, () => {\n                    Request.getJournal(this.state.activeGroup)\n                    .then((journal) => {this.setState({journal:journal})}) });\n                }}>Группа 1\n                </button>\n                <button onClick={() => { this.setState({activeGroup:2}, () => {\n                    Request.getJournal(this.state.activeGroup)\n                    .then((journal) => {this.setState({journal:journal})}) });\n                }}>Группа 2\n                </button>\n                <button onClick={() => { this.setState({activeGroup:3}, () => {\n                    Request.getJournal(this.state.activeGroup)\n                    .then((journal) => {this.setState({journal:journal})}) });\n                }}>Группа 3\n                </button>\n                <button onClick={() => { this.setState({activeGroup:4}, () => {\n                    Request.getJournal(this.state.activeGroup)\n                    .then((journal) => {this.setState({journal:journal})}) });\n                }}>Группа 4\n                </button>\n            </div>\n        );\n    }\n}\n\n\nclass JournalTable extends Component {\n    render() {\n        return <Table bordered>\n        <thead>\n            <tr>\n                <th>ID студента</th>\n                <th>ID учебной группы</th>\n                <th>ID уч. плана</th>\n                <th>Опоздание</th>\n                <th>Число пересдач</th>\n                <th>Оценка</th>\n                <th>Тип аттестации</th>\n            </tr>\n        </thead>\n        <tbody>\n        {this.props.journal.map((journal) => {\n            return <tr>\n                    <td>{journal.studentId}</td>\n                    <td>{journal.studyGroupId}</td>\n                    <td>{journal.studyPlanId}</td>\n                    <td>{journal.inTime.toString()}</td>\n                    <td>{journal.count}</td>\n                    <td bgcolor={journal.markName == 'Неудовлетворительно' || journal.markName == 'Незачет' ||journal.markName == 'Неявка' ? 'yellow' : 'white' }>\n                    {journal.markName}</td>\n                    <td>{journal.type}</td>\n                </tr>\n        })}\n        </tbody>\n        </Table>\n    }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}